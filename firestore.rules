/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and memorial pages,
 *              with an additional admin role based on document existence.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /users/{userId}/memorialPages/{memorialPageId}: Stores memorial pages created by users, accessible only by the owning user.
 * - /roles_admin/{userId}: A collection used to grant admin privileges based on the existence of a document.
 *
 * Key Security Decisions:
 * - User profiles and memorial pages are strictly owned by the user ID in the path.
 * - Listing of user documents is disallowed for privacy.
 * - Admin privileges are granted based on the presence of a document in the /roles_admin/{userId} collection.
 * - The rules leverage Authorization Independence by duplicating the 'userId' in the MemorialPage document from its parent 'users' collection.
 *
 * Denormalization for Authorization:
 * - The 'userId' is present in both the /users/{userId} path and the MemorialPage documents,
 *   allowing rules to easily check ownership without additional reads.
 *
 * Structural Segregation:
 * - Private user data and memorial pages are stored under the /users/{userId} path, ensuring
 *   that access is restricted to the owning user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their profile.
     * @deny (create) - Unauthenticated users cannot create user profiles.
     * @deny (update, delete) - Another authenticated user cannot modify another user's profile.
     * @deny (list) - Listing all users is not allowed.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Only signed-in users can attempt any operations on user documents
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow list: if false;
    }

    /**
     * @description Enforces access control for memorial pages created by users.
     * @path /users/{userId}/memorialPages/{memorialPageId}
     * @allow (create) - Authenticated user with matching UID can create memorial pages under their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify memorial pages under their profile.
     * @deny (create) - Unauthenticated users cannot create memorial pages.
     * @deny (update, delete) - Another authenticated user cannot modify another user's memorial pages.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId}/memorialPages/{memorialPageId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages admin roles based on document existence in the `/roles_admin/{userId}` collection.
     * @path /roles_admin/{userId}
     * @allow (create) - Only an admin can grant another user the admin role.
     * @allow (get) - Any authenticated user can check if a user has an admin role.
     * @allow (delete) - Only an admin can revoke another user's admin role.
     * @deny (list, update) - Listing and updating admin roles is not allowed.
     * @principle Implements Database-Based Access Control (DBAC) using document existence.
     */
    match /roles_admin/{userId} {
        allow create: if isAdmin();
        allow get: if isSignedIn();
        allow delete: if isAdmin();
        allow list, update: if false;
    }

    // Helper functions

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the provided userId.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource AND the resource exists.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

        /**
         * @description Checks if the authenticated user has the admin role.
         * @return True if the user has the admin role, false otherwise.
         */
    function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}