/**
 * @fileoverview Firestore Security Rules for Eternity Pages.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for memorial pages.
 * Admin roles are managed by document existence in the `/roles_admin/{userId}` collection, enabling efficient role checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the user.
 * - /memorials/{memorialId}: Stores memorial pages, publicly readable but writable only by the author.
 * - /roles_admin/{userId}: Indicates admin privileges; document existence grants admin access.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data under `/users/{userId}`.
 * - Memorial pages are publicly readable, but only the creator can modify or delete them.
 * - Admin privileges are determined by the presence of a document in `/roles_admin/{userId}`.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - Memorial pages store the `authorId` directly within the document, avoiding the need for extra reads to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if userId == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, or delete their profile if userId == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile with userId == 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read memorial pages, but only the author can modify or delete them.
     * @path /memorials/{memorialId}
     * @allow (get, list) - Any user can read any memorial page.
     * @allow (create) - User with UID 'user123' can create a memorial page with authorId == 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update or delete a memorial page they authored (resource.data.authorId == 'user123').
     * @deny (create) - User with UID 'user456' cannot create a memorial page with authorId != 'user456'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete a memorial page authored by 'user123'.
     * @principle Allows public read access while enforcing owner-only writes for memorial pages.
     */
    match /memorials/{memorialId} {
       function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == resource.data.authorId && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Checks for the existence of a document in the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (get) - Anyone can attempt to get a document at this location.  The backend can interpret a "Not Found" as "Not an Admin."
     * @allow (create) - Only a privileged process (e.g., backend) can create admin roles.  This example rule allows anyone to create, but in production, this *must* be restricted.
     * @allow (delete) - Only a privileged process (e.g., backend) can delete admin roles.  This example rule allows anyone to delete, but in production, this *must* be restricted.
     * @deny (list) - Listing admin roles is prohibited.
     * @deny (update) - Updating admin roles is prohibited (only creation/deletion is allowed).
     * @principle Uses document existence to grant admin privileges.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if true; // TODO: Restrict to backend only
      allow update: if false;
      allow delete: if true; // TODO: Restrict to backend only
    }
  }
}