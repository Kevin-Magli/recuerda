/**
 * @file Eternity Pages Firestore Security Rules
 * @version Prototyping Mode - Authorization Focused
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and uses
 * database-based access control (DBAC) for admin roles. Data validation is minimized
 * to allow for rapid prototyping and schema evolution.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /users/{userId}/memorialPages/{memorialPageId}: Stores memorial pages owned by the user.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges to the user.
 *
 * Key Security Decisions:
 * - Strict user ownership: Users can only access their own data.
 * - Admin role via DBAC: Admin privileges are granted based on document existence.
 * - Minimal data validation: Focus on authorization, not schema enforcement.
 * - Denormalization for Authorization: The `memorialPages` collection repeats the `userId`
 *   from the parent document to allow for simple, independent authorization checks.
 *
 * Authorization Independence: The rules avoid complex `get()` calls by denormalizing data
 * and using existence checks for authorization. This ensures atomic operations and
 * simplifies debugging.
 *
 * Structural Segregation: Different types of data are stored in separate collections,
 * ensuring a homogeneous security posture for each collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId) - Allows a user to read their own profile.
     * @allow (create) if isOwner(userId) - Allows a user to create their own profile.
     * @allow (update, delete) if isExistingOwner(userId) - Allows a user to update/delete their own profile if it exists.
     * @deny (get, list) if !isOwner(userId) - Denies other users from accessing this profile.
     * @deny (create) if !isOwner(userId) - Denies other users from creating a profile with this id.
     * @deny (update, delete) if !isExistingOwner(userId) - Denies other users from updating or deleting this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to memorial pages created by users.
     * @path /users/{userId}/memorialPages/{memorialPageId}
     * @allow (get, list) if isOwner(userId) - Allows a user to read their own memorial pages.
     * @allow (create) if isOwner(userId) - Allows a user to create a memorial page under their user ID.
     * @allow (update, delete) if isExistingOwner(userId) - Allows a user to update/delete their own memorial page if it exists.
     * @deny (get, list) if !isOwner(userId) - Denies other users from accessing this memorial page.
     * @deny (create) if !isOwner(userId) - Denies other users from creating a memorial page under a different user ID.
     * @deny (update, delete) if !isExistingOwner(userId) - Denies other users from updating or deleting this memorial page.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/memorialPages/{memorialPageId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages admin roles based on document existence.
     * @path /roles_admin/{userId}
     * @allow get: if isAdmin(); - Allows admins to check the presence of an admin role.
     * @allow list: if false; - Listing admin roles is forbidden.
     * @allow create: if isAdmin(); - Allows admins to grant admin roles by creating documents.
     * @allow update: if isAdmin(); - Allows admins to modify existing admin roles.
     * @allow delete: if isAdmin(); - Allows admins to revoke admin roles by deleting documents.
     * @deny get: if !isAdmin(); - Denies non-admins to check for admin roles.
     * @deny create: if !isAdmin(); - Denies non-admins from creating admin roles.
     * @deny update: if !isAdmin(); - Denies non-admins from updating existing admin roles.
     * @deny delete: if !isAdmin(); - Denies non-admins from deleting admin roles.
     * @principle Uses DBAC (Database-Based Access Control) to grant admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in, is the owner, and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return True if the user is signed in, the user IDs match, and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges based on the existence of a document in /roles_admin/{userId}.
     * @return True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}