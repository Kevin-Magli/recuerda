/**
 * @fileoverview Firestore Security Rules for Eternity Pages.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read/owner-write access patterns.
 * User profiles are strictly private and only accessible to the owning user.
 * Memorial pages are publicly readable but writable only by their creators.
 * Admin roles are determined by the presence of a document in the roles_admin collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the user.
 * - /memorials/{memorialId}: Stores public memorial pages, readable by all but writable only by the author.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges; content is irrelevant.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Admin role checks are performed via document existence for efficiency.
 * - Memorial page reads are public to facilitate sharing.
 *
 * Denormalization for Authorization:
 * - MemorialPage documents include an `authorId` field to simplify ownership checks for write operations.
 * - Admin privileges are granted based on the *existence* of a document in the `/roles_admin/{userId}` collection.
 *
 * Structural Segregation:
 * - Public memorial pages are stored in a top-level `/memorials` collection to allow public read access without compromising user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get, list, update, delete) - User with matching UID can read, update, and delete their profile.
     * @deny (create, update, delete) - Any other user cannot create, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to memorial pages.
     * @path /memorials/{memorialId}
     * @allow (get, list) - Any user can read memorial pages.
     * @allow (create) - User can create a memorial page if they are the author.
     * @allow (update, delete) - Only the author can update or delete a memorial page.
     * @deny (create, update, delete) - Other users cannot modify memorial pages.
     * @principle Allows public read access with owner-only writes, enforced by the `authorId` field.
     */
    match /memorials/{memorialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memorialId) {
        return resource.data.authorId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(memorialId);
      allow delete: if isSignedIn() && isOwner(memorialId);
    }

     /**
      * @description Controls access to admin roles. Document existence grants admin privileges.
      * @path /roles_admin/{userId}
      * @allow (create) - Only a function can create these documents
      * @allow (get) - Any authenticated user can check for admin status.
      * @allow (list) - Listing is disabled.
      * @allow (update, delete) - Only a function can update these documents
      * @principle Admin privileges are granted based on document existence.
      */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false; // Only a server function can create admin roles.
        allow update: if false; // Only a server function can update admin roles.
        allow delete: if false; // Only a server function can delete admin roles.
    }
  }
}