/**
 * @fileoverview Firestore Security Rules for Eternity Pages.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read/owner-write access patterns.
 * User profiles are strictly private and only accessible to the owning user. Memorial pages are publicly readable,
 * but can only be created, updated, or deleted by their author.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the user.
 * - /memorials/{memorialId}: Stores memorial pages, publicly readable, but writable only by the author.
 * - /roles_admin/{userId}: Indicates admin roles, determined by document existence.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed for privacy.
 * - Admin privileges are granted by the existence of a document in the /roles_admin collection, not by its content.
 * - Rules use path-based authorization where applicable for efficiency.
 * - Denormalization: The 'MemorialPage' entity MUST have an 'authorId' field for write authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the provided user ID.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @deny (get) User with UID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Only the user can read their own profile.
      allow get: if isOwner(userId);
      // Only the user can list their own profile - in this case, deny it as there are no subcollections to list
      allow list: if false;
      // Only the user can create their own profile. The document ID must match their UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // Only the user can update their own profile.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // Only the user can delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for memorial pages.
     * @path /memorials/{memorialId}
     * @allow (get) Any user can read a memorial page.
     * @allow (list) Any user can list memorial pages.
     * @allow (create) User with UID 'user123' can create a memorial page with authorId 'user123'.
     * @deny (create) User with UID 'user456' cannot create a memorial page with authorId 'user123'.
     * @principle Public read access with owner-only writes; validates relational integrity between documents.
     */
    match /memorials/{memorialId} {
      // Anyone can read or list memorial pages.
      allow get, list: if true;
      // Only the author can create a memorial page, and the authorId must match their UID.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // Only the author can update a memorial page.
      allow update: if isExistingOwner(resource.data.authorId);
      // Only the author can delete a memorial page.
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for admin roles, based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) Only a privileged process (e.g., a Cloud Function) can grant admin roles.  This rule is here as a placeholder and should be adjusted with the function's auth logic.
     * @allow (get) Existence check for admin privileges (used internally).
     * @deny (create) Regular users cannot grant themselves admin roles.
     * @principle Uses 'Existence over Content' for efficient role checking.
     */
    match /roles_admin/{userId} {
      // Only allow get to verify if the document exists to check for admin role.
      allow get: if true;
      // No listing of admins
      allow list: if false;
      // In production, this should be protected by a privileged environment (e.g., Cloud Functions with Admin SDK).
      // This is a placeholder for prototyping.  Replace `true` with the appropriate auth check
      allow create: if false; // TODO: secure this with a privileged environment
      allow update: if false;
      allow delete: if false;
    }
  }
}